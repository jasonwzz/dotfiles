"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""       Install Plugins       """"""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has('nvim')

  " Required:
  exe "set runtimepath+=".$HOME."/.local/share/dein/repos/github.com/Shougo/dein.vim"

  exe "let deinloaded=dein#load_state('".$HOME."/.local/share/dein')"
  " Required:
  " dein#load_state(.$HOME.'/.local/share/dein')
  if deinloaded
    exe "call dein#begin('".$HOME."/.local/share/dein')"

    " Let dein manage dein
    " Required:
    exe "call dein#add('".$HOME."/.local/share/dein/repos/github.com/Shougo/dein.vim')"

    " Add or remove your plugins here:
    call dein#add('Shougo/neosnippet.vim')
    call dein#add('Shougo/neosnippet-snippets')

    call dein#add('flazz/vim-colorschemes')
    call dein#add('Shougo/deoplete.nvim')
    call dein#add('Shougo/denite.nvim')
    call dein#add('vim-airline/vim-airline')
    call dein#add('vim-airline/vim-airline-themes')
    call dein#add('vim-scripts/taglist.vim')
    call dein#add('tpope/vim-surround')
    call dein#add('tpope/vim-repeat')
    call dein#add('christoomey/vim-tmux-navigator')
    call dein#add('fntlnz/atags.vim')
    call dein#add('vim-scripts/Mark--Karkat')
    ""  call dein#add('neomake/neomake')
    " one recent change makes clang-tidy not able to pick local compilation
    " database. so using a forked version fixing that issue now
    call dein#add('jasonwzz/neomake')
    call dein#add('vim-scripts/a.vim')
    call dein#add('kien/ctrlp.vim')
    call dein#add('jeetsukumaran/vim-buffergator')
    call dein#add('easymotion/vim-easymotion')
    call dein#add('matze/vim-move')
    call dein#add('vim-scripts/c.vim')
    call dein#add('maxbrunsfeld/vim-yankstack')
    call dein#add('octol/vim-cpp-enhanced-highlight')
    call dein#add('godlygeek/tabular')
    call dein#add('tmux-plugins/vim-tmux-focus-events')
    " call dein#add('https://github.factset.com/zwang/deoplete-clang2')
    call dein#add('tpope/vim-fugitive')
    call dein#add('mhinz/vim-signify')
    call dein#add('mhinz/vim-startify')
    call dein#add('moll/vim-bbye')
    ""  call dein#add('arakashic/chromatica.nvim')
    ""  call dein#add('zchee/deoplete-clang')
    " call dein#add('tweekmonster/deoplete-clang2')
    "Plugin 'tweekmonster/deoplete-clang2'
    "Plugin 'zchee/deoplete-jedi'
    "Plugin 'majutsushi/tagbar'
    "Plugin 'LucHermitte/lh-vim-lib'
    "Plugin 'LucHermitte/lh-tags'
    "Plugin 'LucHermitte/lh-dev'
    "Plugin 'LucHermitte/lh-brackets'
    "Plugin 'LucHermitte/vim-refactor'

    " You can specify revision/branch/tag.
    ""call dein#add('Shougo/vimshell', { 'rev': '3787e5' })

  endif

  ""exe "let deinloaded=dein#load_state('".$HOME."/.local/share/dein')"
  ""if deinloaded
  ""  exe "call dein#begin('".$HOME."/.local/share/dein')"
  ""  call dein#add('moll/vim-bbye')
  ""  call dein#end()
  ""  call dein#save_state()
  ""endif

  " Required:
  filetype plugin indent on
  syntax enable


  "End dein Scripts-------------------------

  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  """"""""""""""""""""""""""""""    Plugin Configuration     """"""""""""""""""""""""""""""""
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  " Map the leader key to SPACE
  let mapleader="\<SPACE>"

  " CtrlP settings
  let g:ctrlp_root_markers = ['.rakefds', '.p4rc','.git']
  " Alt-P to open CtrlP -- find files in the directory to open
  let g:ctrlp_map = '<A-p>'
  nmap <A-p> :CtrlP<CR>
  " Alt-Shift-P to switch to opened buffers
  nmap <A-S-p> :CtrlPBuffer<CR>
  " when opening multiple files, open them in hidden buffer
  let g:ctrlp_open_multiple_files = 'i'


  " airline setting
  let g:airline_theme='bubblegum'
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#branch#enabled = 0
  ""if isdirectory("./.git")
  ""  let g:airline#extensions#branch#enabled = 1
  ""  let g:airline#init#vim_async = 1
  ""else
  ""endif

  " don't remember what this is..
  let g:buffergator_suppress_keymaps=1

  " cpp highlighting stuff
  let g:cpp_class_scope_highlight = 1
  let g:cpp_member_variable_highlight = 1
  let g:cpp_experimental_template_highlight = 1

  " cycle through previous/next yanked item when pasting
  nmap <C-p> <Plug>yankstack_substitute_older_paste
  nmap <C-n> <Plug>yankstack_substitute_newer_paste
  let g:yankstack_map_keys = 0
  let g:yankstack_yank_keys = ['y', 'd', 'x', 'yy', 'D', 'dd']

  " neomake setting
  " enable clang-tidy as the cpp linter
  let g:neomake_cpp_enabled_makers = ['clangtidy']
  " On each save, run neomake, which will run clang-tidy
  autocmd! BufWritePost * Neomake

  " chromatica is not used. 
  " I can't getting it working for large files
  " it stops highlighting after few hundreds of lines
  " let g:chromatica#highlight_feature_level = 1
  " let g:chromatica#enable_at_startup=0
  " let g:chromatica#debug_log = 1
  " let g:chromatica#libclang_path='$HOME/local/clang/trunk/lib/libclang.so'
  " can't get deoplete-clang working either
  ""let g:deoplete#sources#clang#libclang_path = '$HOME/local/clang/trunk/lib/libclang.so'
  ""let g:deoplete#sources#clang#clang_complete_database = './'

  " deoplete setting
  let g:deoplete#auto_complete_delay = 10
  " use shift tab to backward cycle
  inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
  " automatically closing the scratch window at the top of the vim window on finishing a complete or leaving insert
  autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
  " don't open scratch window for preview
  set completeopt-=preview

  " deoplete-clang2 settings
  exe "let g:deoplete#sources#clang#executable = '".$HOME."/local/clang/trunk/bin/clang'"
  let g:deoplete#sources#clang#flags = ['-I/home/dev/fonix/online/qa/src/X86_64/el6/include','-I/home/dev/fonix/online/qa/src','-I.','-IX86_64/el6/include','-isystem/home/fds/build/include/thrift','-isystem/home/fds/build/include','-isystem/usr/include/freetype2','-isystem/usr/include/libxml2','-I/usr/include','-I/usr/lib/gcc/x86_64-redhat-linux/4.4.4/include','-I/export/fds/Linux_RHEL6_x86_64/build/include/c++/4.4.4','-I/export/fds/Linux_RHEL6_x86_64/build/include/c++/4.4.4/x86_64-redhat-linux','-D_GLIBCXX_VISIBILITY=0','-DCRYPTOPP_ENABLE_NAMESPACE_WEAK','-DFDS_USE_SYSTEM_CRYPTOPP','-DFDS_USE_SYSTEM_XERCES','-DFDS_USE_SYSTEM_ZEROMQ','-D__USE_STD_IOSTREAM','-DFONIX_WRAPPING_CXA_THROW','-DFDS_TOOLKIT','-DSINGLE_USER_ONLINE_ONLY','-DFDS_ANSI64','-DFDS_FORTRAN_64','-DFDS_ONLINE','-DFDS_USE_BOOST_1_34','-DNDEBUG','-D_GNU_SOURCE','-D__IEEE_FLOAT','-D__NEW_STARLET','-DFDS_EXPORT_ENABLED', '-include', '/home/dev/fonix/online/qa/src/first_include.h', '-fexceptions']
  " if a completed function takes arguments, use <C-k> <C-M-k> to jump back and forth to fill the arguments
  " apparently vim doesn't differentiate C-k vs C-K/C-S-k so can use that.
  let g:clang2_placeholder_prev = '<C-M-k>'
  ""let g:clang2_placeholder_prev = '<C-S-i>'
  let g:clang2_placeholder_next = '<C-k>'

  " generate ctags on save
  autocmd BufWritePost *.{cpp,cxx,h} call atags#generate()
  let g:atags_build_commands_list = [
        \"ctags * tags",
        \"ack -f -n --cpp > cscope.files",
        \"cscope -icscope.files -b "]

  " tagbar setting 
  " not used anymore
  " it sometimes crashes vim. haven't looked into why
  "nmap <F8> :TagbarToggle<CR>

  " using taglist now
  " taglist shortcut & settings
  nmap <F7> :TlistToggle<CR>
  let Tlist_Use_Right_Window = 1
  let Tlist_WinWidth = 40

  " NeoSnippet Plugin key-mappings.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  inoremap <C-k>     <Plug>(neosnippet_expand_or_jump)
  snoremap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xnoremap <C-k>     <Plug>(neosnippet_expand_target)
  " SuperTab like snippets behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  ""imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  snoremap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " vim nagivator
  let g:tmux_navigator_no_mappings = 1
  nnoremap <silent> <m-a> :TmuxNavigateLeft<cr>
  nnoremap <silent> <m-s> :TmuxNavigateDown<cr>
  nnoremap <silent> <m-w> :TmuxNavigateUp<cr>
  nnoremap <silent> <m-d> :TmuxNavigateRight<cr>
  nnoremap <silent> <m-\> :TmuxNavigatePrevious<cr>

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  if has("python3")
    call deoplete#enable()
    " deoplete tab complete
    inoremap <expr><TAB> pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ deoplete#mappings#manual_complete()
    function! s:check_back_space() "{{{
      let col = col('.') - 1
      return !col || getline('.')[col - 1] =~ '\s'
    endfunction "}}}
  endif

endif " end of if has nvim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""           General           """"""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has('nvim')
  colorscheme molokai             " Load color scheme {name}
endif

set ruler                       " Show the line and column number
" of the cursor position
set number                      " Print the line number in front of each line
set list                        " Show tabs
set listchars=tab:>-
set showmatch                   " When a bracket is inserted,
" briefly jump to the matching one
"set noswf                       " Do not use a swapfile for the buffer

set path=.,$qa,$vms_include,,   " This is a list of directories
" which will be searched
" e.g. you could use ":find pa_options_factset.json" 
" to open $qa/pa_options_factset.json
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/X86_64/*,*/X86_64*/*,*/regression/*,*/log/*,*/output/*,*/.padevenv/*
" ignore these directories when searching
set matchpairs=(:),{:},[:],<:>  " Characters that form pairs
set backspace=2                 " :set backspace=indent,eol,start
set tabstop=2                   " Number of spaces that a <Tab> in the file
" counts for
set softtabstop=2               " Number of spaces that a <Tab> counts for
" while performing editing operations
set smarttab                    " A <Tab> in front of a line inserts
" blanks according to 'shiftwidth'
set expandtab                   " Use the appropriate number of spaces
" to insert a <Tab>
set autoindent                  " Copy indent from current line
" when starting a new lineauto indent
set shiftwidth=2                " Number of spaces to use for each step
" of (auto)indent
set smartindent                 " Do smart autoindenting
" when starting a new line

set hlsearch                    " When there is a previous search pattern,
" highlight all its matches
set ignorecase                  " Ignore case in search patterns
set smartcase                   " Override the 'ignorecase' option
" if the search pattern contains
" upper case characters
set encoding=utf-8              " UTF-8 character encoding
syntax on

set wildmenu
set wildmode=list:longest,full 

set guifont=9x15

" use relative/hybrid line number
set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

"set path+=/home/dev/fonix/online/qa/src/** "too slow...

map <MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>

"Make curly braces lined up with this line and go into insert indented by 4
map Q o{<Esc>lxo}<Esc>ko
imap <C-U> <ESC>Q

"Make curly braces lined up with this line and go into insert indented by 4
map B A<Space>{<Esc>lxo}<Esc>ko
imap <C-Y> <ESC>B

" Automatically close parenthesis, square brackets, curly braces, and angle brackets.
inoremap ( ()<Left>
inoremap [ []<Left>
inoremap { {}<Left>
autocmd Syntax html,vim inoremap < <lt>><Left>
""autocmd Syntax cpp inoremap < <><Left>

function! ClosePair(char)
  if getline('.')[col('.') - 1] == a:char
    return "\<Right>"
  else
    return a:char
  endif
endf

inoremap ) <c-r>=ClosePair(')')<CR>
inoremap ] <c-r>=ClosePair(']')<CR>
inoremap } <c-r>=ClosePair('}')<CR>
inoremap > <c-r>=ClosePair('>')<CR>

" Auto Close Quotes (function allows for escaping auto quotes).
function! QuoteDelim(char)
  let line = getline('.')
  let col = col('.')
  if line[col - 2] == "\\"
    "Inserting a quoted quotation mark into the string
    return a:char
  elseif line[col - 1] == a:char
    "Escaping out of the string
    return "\<Right>"
  else
    "Starting a string
    return a:char.a:char."\<Left>"
  endif
endf

inoremap " <c-r>=QuoteDelim('"')<CR>
inoremap ' <c-r>=QuoteDelim("'")<CR>

" Delete empty pairs
function! InAnEmptyPair()
  let cur = strpart(getline('.'),getpos('.')[2]-2,2)
  for pair in (split(&matchpairs,',') + ['":"',"':'"])
    if cur == join(split(pair,':'),'')
      return 1
    endif
  endfor
  return 0
endfunc

func! DeleteEmptyPairs()
  if InAnEmptyPair()
    return "\<Left>\<Del>\<Del>"
  else
    return "\<BS>"
  endif
endfunc

inoremap <expr> <BS> DeleteEmptyPairs()

"auto indent after pressing return in an empty pair.
func! IndentEmptyPair()
  if InAnEmptyPair()
    return "\<CR>\<CR>\<Up>\<Tab>"
  else
    return "\<CR>"
  endif
endfunc

inoremap <expr> <CR> IndentEmptyPair()

"map <F4> :call SwitchCH()<Return> "what is this?

"when changing indentation in visual mode, reselect the same text
vnoremap > >gv
vnoremap < <gv

" filetype associations
autocmd BufEnter *.fws set filetype=xml

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

"not Vi - compatible
set nocompatible incsearch

if has("unnamedplus") "use system's clipboard
  set clipboard=unnamedplus
elseif has("clipboard")
  set clipboard=unnamed
endif

"autoinsert comment if the previous line was commented
set formatoptions=tcqr

set autoread
autocmd CursorHold,CursorHoldI,FocusGained,BufEnter * checktime
autocmd FileChangedShellPost *
      \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

" By default, <c-l> clears and redraws the screen (like :redraw!). The
" following mapping does the same, plus de-highlighting the matches found via
" /, ? etc., plus fixing syntax highlighting (sometimes Vim loses highlighting
" due to complex highlighting rules), plus force updating the syntax
" highlighting in diff mode
nnoremap <M-l> :nohlsearch<cr>:MarkClear<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""        C/C++ specific       """"""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" some smart indent for C
set cindent

"	The 'cinoptions' affect the way 'cindent' reindents lines in a C program.
set cinoptions=:0,p0,t0

set cinwords=if,else,while,do,for,switch,case

" Show $ at end of line and trailing space as ~
" set lcs=tab:\ \ ,eol:$,trail:,extends:>,precedes:<

syn region myFold start="{" end="}" transparent fold
syn sync fromstart

" Add highlighting for function definition in C++
function! EnhanceCppSyntax()
  " class member variable syntax highlighting based on FDS convention
  hi default Member ctermfg=LightBlue guifg=LightBlue 
  syn match cppClassMemVariable "m_\w\+"
  hi def link cppClassMemVariable Member
  ""  syn match cppFuncDef "::\~\?\zs\h\w*\ze([^)]*\()\s*\(const\)\?\)\?$"
  ""  hi def link cppFuncDef Special
endfunction

autocmd Syntax cpp call EnhanceCppSyntax()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""     Tabs and scrolling      """"""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Use the appropriate number of spaces to insert a	<Tab>.
set expandtab

"<Tab> does what you think it should do according to the situation
set smarttab

"Copy indent from current line when starting a new line
set autoindent

"Smart indent
set smartindent

"don't wrap up the long lines
set nowrap

"move 5 chars at the time
set sidescroll=5

" Tabs are 2 spaces
set ts=2
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""       Files, backups and undo     """""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile
set undofile
exe "set undodir='".$HOME."/.vim/files/undo/'"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""       General   Hotkeys        """"""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"control-Tab to switch between tabs
nmap <leader>tn :tabnext<CR>
nmap <leader>tp :tabpre<CR>
map! <S-Insert> <MiddleMouse>
"map <F6> <ESC>:wa<Return> "save all on F6

" But vim-move plugin has defined:
" <A-j/k> to move lines up or down
" so you probably don't need any of the commented lines below:

" move the current line up or down
""nmap <C-j>  :m+<CR>==
""nmap <C-k> :m-2<CR>==
""imap <C-j>  <C-O>:m+<CR><C-O>==
""imap <C-k> <C-O>:m-2<CR><C-O>==
" move the selected! block up or down
""vmap <C-j>  :m'>+<CR>gv=gv
""vmap <C-k> :m'<-2<CR>gv=g
" move the current line up or down
"nmap <C-Down> :m+<CR>==
"nmap <C-Up> :m-2<CR>==
"imap <C-Down> <C-O>:m+<CR><C-O>==
"imap <C-Up> <C-O>:m-2<CR><C-O>==
"" move the selected block up or down
"vmap <C-Down> :m'>+<CR>gv=gv
"vmap <C-Up> :m'<-2<CR>gv=gv

" not very useful. also blocking some hotkey I want to reassign
" so commenting out..
" move the current line left or right
"nmap <C-h> <<
"nmap <C-l> >>
"imap <C-h> <C-O><<
"imap <C-l> <C-O>>>v
"" move the selected block left or right
"vmap <C-h> >gv
"vmap <C-l> <gv

"scroll with space
"nmap <Space> <PageDown>

" Courtesy of Michael Naumann, Jürgen Krämer
" Visually select text, then search for it, forwards or backwards
vmap <silent> * :<C-U>let old_reg=@"<cr>
      \gvy/<C-R><C-R>=substitute(
      \escape(@", '\\/.*$^~[]'), "\n$", "", "")<CR><CR>
      \:let @"=old_reg<cr>
vmap <silent> # :<C-U>let old_reg=@"<cr>
      \gvy?<C-R><C-R>=substitute(
      \escape(@", '\\/.*$^~[]'), "\n$", "", "")<CR><CR>
      \:let @"=old_reg<cr>

" notes
" gg=G to correct indentation for the whole file

" quickfix / location list
nmap <leader>op :lpr<CR>
nmap <leader>on :lne<CR>
nmap <leader>oo :lop<CR>
nmap <leader>oc :lcl<CR>


"""""""""""""""""""""""""       Buffer  Hotkeys        """""""""""""""""""""""""""""""""

" buffer switching shortcuts
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
set hidden
" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nnoremap <leader>T :enew<cr>
" Move to the next buffer
nnoremap <leader>l :bnext<CR>
" Move to the previous buffer
nnoremap <leader>h :bprevious<CR>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nnoremap <leader>bq :bp <BAR> bd #<CR>
" Show all open buffers and their status
nnoremap <leader>bl :ls<CR>
nnoremap <leader>d :Bdelete<CR>

" switch to previous buffer
nnoremap <leader>p :e #<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""       Perforce   Hotkeys        """""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Perf edit current file (control pe)
function! P4Edit()
  if has("vms")
    return '!perf edit %'
  elseif has("unix")
    return '!p4 edit %'
  else
    return ''
  endif
endfunc

function! P4Checkout()
  if has("vms")
    echo "vms not supported"
  elseif has("unix")
    :exec "!p4view \/m" expand('%:t')
    :exec "!p4 sync" expand('%:t') "@online_qa"
    :exec "!p4 edit" expand('%:t') 
    :e %:t
  endif
endfunc

function! OpenQA()
  if has("vms")
    echo "vms not supported"
  elseif has("unix")
    :tabe $qa/%:t
  endif
endfunc

nmap <Leader>fe :exec P4Edit()<CR>
nmap <Leader>fo :exec P4Checkout()<CR>
nmap <Leader>qa :exec OpenQA()<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""        Window Management        """""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" toggle between maximized window and normal window
" useful in split windows and you want to temporarily focus on one window
nnoremap <C-W>O :call MaximizeToggle()<CR>
nnoremap <C-W>o :call MaximizeToggle()<CR>
nnoremap <C-W><C-O> :call MaximizeToggle()<CR>

function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""          Neovim Terminal        """""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('nvim')

  " To map <Esc> to exit terminal-mode
  tnoremap <Esc> <C-\><C-n>

endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""          Cscope Hotkeys         """""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")

  """"""""""""" Standard cscope/vim boilerplate

  " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
  set cscopetag

  " check cscope for definition of a symbol before checking ctags: set to 1
  " if you want the reverse search order.
  set csto=0

  set csprg=/usr/bin/cscope

  " add any cscope database in current directory
  if filereadable("cscope.out")
    cs add cscope.out  
    " else add the database pointed to by environment variable 
  elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
  endif

  " show msg when any other cscope db added
  set cscopeverbose  


  """"""""""""" My cscope/vim key mappings
  "
  " The following maps all invoke one of the following cscope search types:
  "
  "   's'   symbol: find all references to the token under cursor
  "   'g'   global: find global definition(s) of the token under cursor
  "   'c'   calls:  find all calls to the function name under cursor
  "   't'   text:   find all instances of the text under cursor
  "   'e'   egrep:  egrep search for the word under cursor
  "   'f'   file:   open the filename under cursor
  "   'i'   includes: find files that include the filename under cursor
  "   'd'   called: find functions that function under cursor calls
  "
  " Below are three sets of the maps: one set that just jumps to your
  " search result, one that splits the existing vim window horizontally and
  " diplays your search result in the new window, and one that does the same
  " thing, but does a vertical split instead (vim 6 only).
  "
  " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
  " unlikely that you need their default mappings (CTRL-\'s default use is
  " as part of CTRL-\ CTRL-N typemap, which basically just does the same
  " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
  " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
  " of these maps to use other keys.  One likely candidate is 'CTRL-_'
  " (which also maps to CTRL-/, which is easier to type).  By default it is
  " used to switch between Hebrew and English keyboard mode.
  "
  " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
  " that searches over '#include <time.h>" return only references to
  " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
  " files that contain 'time.h' as part of their name).


  " To do the first type of search, hit 'CTRL-\', followed by one of the
  " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
  " search will be displayed in the current window.  You can use CTRL-T to
  " go back to where you were before the search.  
  "

  nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>	
  nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>	


  " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
  " makes the vim window split horizontally, with search result displayed in
  " the new window.
  "
  " (Note: earlier versions of vim may not have the :scs command, but it
  " can be simulated roughly via:
  "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>	

  nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>	
  nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>	
  nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	
  nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>	


  " Hitting CTRL-space *twice* before the search type does a vertical 
  " split instead of a horizontal one (vim 6 and up only)
  "
  " (Note: you may wish to put a 'set splitright' in your .vimrc
  " if you prefer the new window on the right instead of the left

  nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>	
  nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	
  nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>


  """"""""""""" key map timeouts
  "
  " By default Vim will only wait 1 second for each keystroke in a mapping.
  " You may find that too short with the above typemaps.  If so, you should
  " either turn off mapping timeouts via 'notimeout'.
  "
  "set notimeout 
  "
  " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
  " with your own personal favorite value (in milliseconds):
  "
  "set timeoutlen=4000
  "
  " Either way, since mapping timeout settings by default also set the
  " timeouts for multicharacter 'keys codes' (like <F1>), you should also
  " set ttimeout and ttimeoutlen: otherwise, you will experience strange
  " delays as vim waits for a keystroke after you hit ESC (it will be
  " waiting to see if the ESC is actually part of a key code like <F1>).
  "
  "set ttimeout 
  "
  " personally, I find a tenth of a second to work well for key code
  " timeouts. If you experience problems and have a slow terminal or network
  " connection, set it higher.  If you don't set ttimeoutlen, the value for
  " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
  "
  "set ttimeoutlen=100

endif

" load additional vim settings
let DOTPATH = $HOME."/.dotfiles"
let config_files = split(globpath(DOTPATH, '**/*.vim'), '\n')
for file in config_files
  exe "source ".file
endfor

if has('nvim')
  if deinloaded
    " Required:
    call dein#end()
    call dein#save_state()
  endif

  " If you want to install not installed plugins on startup.
  if dein#check_install()
    call dein#install()
  endif
endif 
